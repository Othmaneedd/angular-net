{"ast":null,"code":"import { catchError, map } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CrudService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.REST_API = 'http://localhost:9081/api/v1';\n    // Http Header\n    this.httpHeaders = new HttpHeaders().set('Content-Type', 'application/json');\n  }\n  // Add\n  AddUser(data) {\n    let API_URL = `${this.REST_API}/users`;\n    return this.httpClient.post(API_URL, data).pipe(catchError(this.handleError));\n  }\n  // Get all objects\n  GetUsers() {\n    return this.httpClient.get(`${this.REST_API}/users`);\n  }\n  // Get single object\n  GetUser(id) {\n    let API_URL = `${this.REST_API}/users/${id}`;\n    return this.httpClient.get(API_URL, {\n      headers: this.httpHeaders\n    }).pipe(map(res => {\n      return res || {};\n    }), catchError(this.handleError));\n  }\n  // Update\n  updateUser(id, data) {\n    let API_URL = `${this.REST_API}/users/${id}`;\n    return this.httpClient.put(API_URL, data, {\n      headers: this.httpHeaders\n    }).pipe(catchError(this.handleError));\n  }\n  // Delete\n  deleteUser(id) {\n    let API_URL = `${this.REST_API}/users/${id}`;\n    return this.httpClient.delete(API_URL, {\n      headers: this.httpHeaders\n    }).pipe(catchError(this.handleError));\n  }\n  // Error\n  handleError(error) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Handle client error\n      errorMessage = error.error.message;\n    } else {\n      // Handle server error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    console.log(errorMessage);\n    return throwError(() => {\n      errorMessage;\n    });\n  }\n}\nCrudService.ɵfac = function CrudService_Factory(t) {\n  return new (t || CrudService)(i0.ɵɵinject(i1.HttpClient));\n};\nCrudService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CrudService,\n  factory: CrudService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;AAChD,SAAqBC,UAAU,QAAQ,MAAM;AAC7C,SAEEC,WAAW,QAEN,sBAAsB;;;AAK7B,OAAM,MAAOC,WAAW;EAOtBC,YAAoBC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;IAL9B,aAAQ,GAAW,8BAA8B;IAEjD;IACA,gBAAW,GAAG,IAAIH,WAAW,EAAE,CAACI,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;EAE1B;EAE7C;EACAC,OAAO,CAACC,IAAU;IAChB,IAAIC,OAAO,GAAG,GAAG,IAAI,CAACC,QAAQ,QAAQ;IACtC,OAAO,IAAI,CAACL,UAAU,CACnBM,IAAI,CAACF,OAAO,EAAED,IAAI,CAAC,CACnBI,IAAI,CAACb,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,CAAC;EACvC;EAEA;EACAC,QAAQ;IACN,OAAO,IAAI,CAACT,UAAU,CAACU,GAAG,CAAC,GAAG,IAAI,CAACL,QAAQ,QAAQ,CAAC;EACtD;EAEA;EACAM,OAAO,CAACC,EAAO;IACb,IAAIR,OAAO,GAAG,GAAG,IAAI,CAACC,QAAQ,UAAUO,EAAE,EAAE;IAC5C,OAAO,IAAI,CAACZ,UAAU,CAACU,GAAG,CAACN,OAAO,EAAE;MAAES,OAAO,EAAE,IAAI,CAACC;IAAW,CAAE,CAAC,CAACP,IAAI,CACrEZ,GAAG,CAAEoB,GAAQ,IAAI;MACf,OAAOA,GAAG,IAAI,EAAE;IAClB,CAAC,CAAC,EACFrB,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,CAC7B;EACH;EAEA;EACAQ,UAAU,CAACJ,EAAO,EAAET,IAAS;IAC3B,IAAIC,OAAO,GAAG,GAAG,IAAI,CAACC,QAAQ,UAAUO,EAAE,EAAE;IAC5C,OAAO,IAAI,CAACZ,UAAU,CACnBiB,GAAG,CAACb,OAAO,EAAED,IAAI,EAAE;MAAEU,OAAO,EAAE,IAAI,CAACC;IAAW,CAAE,CAAC,CACjDP,IAAI,CAACb,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,CAAC;EACvC;EAEA;EACAU,UAAU,CAACN,EAAO;IAChB,IAAIR,OAAO,GAAG,GAAG,IAAI,CAACC,QAAQ,UAAUO,EAAE,EAAE;IAC5C,OAAO,IAAI,CAACZ,UAAU,CACnBmB,MAAM,CAACf,OAAO,EAAE;MAAES,OAAO,EAAE,IAAI,CAACC;IAAW,CAAE,CAAC,CAC9CP,IAAI,CAACb,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,CAAC;EACvC;EAEA;EACAA,WAAW,CAACY,KAAwB;IAClC,IAAIC,YAAY,GAAG,EAAE;IACrB,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MACrC;MACAD,YAAY,GAAGD,KAAK,CAACA,KAAK,CAACG,OAAO;KACnC,MAAM;MACL;MACAF,YAAY,GAAG,eAAeD,KAAK,CAACI,MAAM,cAAcJ,KAAK,CAACG,OAAO,EAAE;;IAEzEE,OAAO,CAACC,GAAG,CAACL,YAAY,CAAC;IACzB,OAAOzB,UAAU,CAAC,MAAK;MACrByB,YAAY;IACd,CAAC,CAAC;EACJ;;;mBA/DWvB,WAAW;AAAA;;SAAXA,WAAW;EAAA6B,SAAX7B,WAAW;EAAA8B,YAFV;AAAM","names":["catchError","map","throwError","HttpHeaders","CrudService","constructor","httpClient","set","AddUser","data","API_URL","REST_API","post","pipe","handleError","GetUsers","get","GetUser","id","headers","httpHeaders","res","updateUser","put","deleteUser","delete","error","errorMessage","ErrorEvent","message","status","console","log","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\DELL\\dotnet-sqlserver-angular15-crud\\angular-crud-application\\src\\app\\service\\crud.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { User } from './User';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport {\r\n  HttpClient,\r\n  HttpHeaders,\r\n  HttpErrorResponse,\r\n} from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CrudService {\r\n \r\n  REST_API: string = 'http://localhost:9081/api/v1';\r\n\r\n  // Http Header\r\n  httpHeaders = new HttpHeaders().set('Content-Type', 'application/json');\r\n\r\n  constructor(private httpClient: HttpClient) {}\r\n\r\n  // Add\r\n  AddUser(data: User): Observable<any> {\r\n    let API_URL = `${this.REST_API}/users`;\r\n    return this.httpClient\r\n      .post(API_URL, data)\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  // Get all objects\r\n  GetUsers() {\r\n    return this.httpClient.get(`${this.REST_API}/users`);\r\n  }\r\n\r\n  // Get single object\r\n  GetUser(id: any): Observable<any> {\r\n    let API_URL = `${this.REST_API}/users/${id}`;\r\n    return this.httpClient.get(API_URL, { headers: this.httpHeaders }).pipe(\r\n      map((res: any) => {\r\n        return res || {};\r\n      }),\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  // Update\r\n  updateUser(id: any, data: any): Observable<any> {\r\n    let API_URL = `${this.REST_API}/users/${id}`;\r\n    return this.httpClient\r\n      .put(API_URL, data, { headers: this.httpHeaders })\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  // Delete\r\n  deleteUser(id: any): Observable<any> {\r\n    let API_URL = `${this.REST_API}/users/${id}`;\r\n    return this.httpClient\r\n      .delete(API_URL, { headers: this.httpHeaders })\r\n      .pipe(catchError(this.handleError));\r\n  }\r\n\r\n  // Error\r\n  handleError(error: HttpErrorResponse) {\r\n    let errorMessage = '';\r\n    if (error.error instanceof ErrorEvent) {\r\n      // Handle client error\r\n      errorMessage = error.error.message;\r\n    } else {\r\n      // Handle server error\r\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\r\n    }\r\n    console.log(errorMessage);\r\n    return throwError(() => {\r\n      errorMessage;\r\n    });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}