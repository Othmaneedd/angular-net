{"ast":null,"code":"\"use strict\";\n\n// import { Injectable } from '@angular/core';\n// import { User } from './User';\n// import { catchError, map } from 'rxjs/operators';\n// import { Observable, throwError } from 'rxjs';\n// import {\n//   HttpClient,\n//   HttpHeaders,\n//   HttpErrorResponse,\n// } from '@angular/common/http';\n// @Injectable({\n//   providedIn: 'root',\n// })\n// export class CrudService {\n//   REST_API: string = 'http://localhost:9080/api/v1';\n//   // Http Header\n//   httpHeaders = new HttpHeaders().set('Content-Type', 'application/json');\n//   constructor(private httpClient: HttpClient) {}\n//   // Add\n//   AddUser(data: User): Observable<any> {\n//     let API_URL = `${this.REST_API}/users`;\n//     return this.httpClient\n//       .post(API_URL, data)\n//       .pipe(catchError(this.handleError));\n//   }\n//   // Get all objects\n//   GetUsers() {\n//     return this.httpClient.get(`${this.REST_API}/users`);\n//   }\n//   // Get single object\n//   GetUser(id: any): Observable<any> {\n//     let API_URL = `${this.REST_API}/users/${id}`;\n//     return this.httpClient.get(API_URL, { headers: this.httpHeaders }).pipe(\n//       map((res: any) => {\n//         return res || {};\n//       }),\n//       catchError(this.handleError)\n//     );\n//   }\n//   // Update\n//   updateUser(id: any, data: any): Observable<any> {\n//     let API_URL = `${this.REST_API}/users/${id}`;\n//     return this.httpClient\n//       .put(API_URL, data, { headers: this.httpHeaders })\n//       .pipe(catchError(this.handleError));\n//   }\n//   // Delete\n//   deleteUser(id: any): Observable<any> {\n//     let API_URL = `${this.REST_API}/users/${id}`;\n//     return this.httpClient\n//       .delete(API_URL, { headers: this.httpHeaders })\n//       .pipe(catchError(this.handleError));\n//   }\n//   // Error\n//   handleError(error: HttpErrorResponse) {\n//     let errorMessage = '';\n//     if (error.error instanceof ErrorEvent) {\n//       // Handle client error\n//       errorMessage = error.error.message;\n//     } else {\n//       // Handle server error\n//       errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n//     }\n//     console.log(errorMessage);\n//     return throwError(() => {\n//       errorMessage;\n//     });\n//   }\n// }","map":{"version":3,"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","names":[],"sourceRoot":"","sources":["C:\\Users\\DELL\\dotnet-sqlserver-angular15-crud\\angular-crud-application\\src\\app\\service\\crud.service.ts"],"sourcesContent":["// import { Injectable } from '@angular/core';\r\n// import { User } from './User';\r\n// import { catchError, map } from 'rxjs/operators';\r\n// import { Observable, throwError } from 'rxjs';\r\n// import {\r\n//   HttpClient,\r\n//   HttpHeaders,\r\n//   HttpErrorResponse,\r\n// } from '@angular/common/http';\r\n\r\n// @Injectable({\r\n//   providedIn: 'root',\r\n// })\r\n// export class CrudService {\r\n \r\n//   REST_API: string = 'http://localhost:9080/api/v1';\r\n\r\n//   // Http Header\r\n//   httpHeaders = new HttpHeaders().set('Content-Type', 'application/json');\r\n\r\n//   constructor(private httpClient: HttpClient) {}\r\n\r\n//   // Add\r\n//   AddUser(data: User): Observable<any> {\r\n//     let API_URL = `${this.REST_API}/users`;\r\n//     return this.httpClient\r\n//       .post(API_URL, data)\r\n//       .pipe(catchError(this.handleError));\r\n//   }\r\n\r\n//   // Get all objects\r\n//   GetUsers() {\r\n//     return this.httpClient.get(`${this.REST_API}/users`);\r\n//   }\r\n\r\n//   // Get single object\r\n//   GetUser(id: any): Observable<any> {\r\n//     let API_URL = `${this.REST_API}/users/${id}`;\r\n//     return this.httpClient.get(API_URL, { headers: this.httpHeaders }).pipe(\r\n//       map((res: any) => {\r\n//         return res || {};\r\n//       }),\r\n//       catchError(this.handleError)\r\n//     );\r\n//   }\r\n\r\n//   // Update\r\n//   updateUser(id: any, data: any): Observable<any> {\r\n//     let API_URL = `${this.REST_API}/users/${id}`;\r\n//     return this.httpClient\r\n//       .put(API_URL, data, { headers: this.httpHeaders })\r\n//       .pipe(catchError(this.handleError));\r\n//   }\r\n\r\n//   // Delete\r\n//   deleteUser(id: any): Observable<any> {\r\n//     let API_URL = `${this.REST_API}/users/${id}`;\r\n//     return this.httpClient\r\n//       .delete(API_URL, { headers: this.httpHeaders })\r\n//       .pipe(catchError(this.handleError));\r\n//   }\r\n\r\n//   // Error\r\n//   handleError(error: HttpErrorResponse) {\r\n//     let errorMessage = '';\r\n//     if (error.error instanceof ErrorEvent) {\r\n//       // Handle client error\r\n//       errorMessage = error.error.message;\r\n//     } else {\r\n//       // Handle server error\r\n//       errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\r\n//     }\r\n//     console.log(errorMessage);\r\n//     return throwError(() => {\r\n//       errorMessage;\r\n//     });\r\n//   }\r\n// }\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}