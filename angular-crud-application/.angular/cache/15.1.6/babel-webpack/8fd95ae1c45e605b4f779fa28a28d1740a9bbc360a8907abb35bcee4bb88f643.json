{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet AppComponent = class AppComponent {\n  // Injecter le service WordExportService\n  constructor(wordExportService) {\n    this.wordExportService = wordExportService;\n    this.title = '.Net + SQL Server + Angular 15 CRUD Application';\n    this.isDarkMode = false;\n  }\n  ngOnInit() {\n    const darkModeFromStorage = localStorage.getItem('darkMode') === 'true';\n    this.isDarkMode = darkModeFromStorage;\n    document.body.classList.toggle('dark-mode', this.isDarkMode);\n  }\n  // Méthode pour activer/désactiver le mode sombre\n  toggleDarkMode() {\n    this.isDarkMode = !this.isDarkMode;\n    document.body.classList.toggle('dark-mode', this.isDarkMode);\n    localStorage.setItem('darkMode', this.isDarkMode.toString());\n  }\n  // Méthode pour télécharger le fichier Word\n  generateWord() {\n    this.wordExportService.generateWord().subscribe(response => {\n      const blob = new Blob([response], {\n        type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n      });\n      const link = document.createElement('a');\n      link.href = URL.createObjectURL(blob);\n      link.download = 'GeneratedUserReport.docx'; // Nom du fichier à télécharger\n      link.click(); // Déclencher le téléchargement\n    }, error => {\n      console.error('Erreur lors du téléchargement du fichier:', error);\n    });\n  }\n};\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})], AppComponent);\nexport { AppComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAQ1C,IAAMC,YAAY,GAAlB,MAAMA,YAAY;EAIvB;EACAC,YAAoBC,iBAAoC;IAApC,sBAAiB,GAAjBA,iBAAiB;IAJrC,UAAK,GAAG,iDAAiD;IACzD,eAAU,GAAG,KAAK;EAGyC;EAE3DC,QAAQ;IACN,MAAMC,mBAAmB,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,KAAK,MAAM;IACvE,IAAI,CAACC,UAAU,GAAGH,mBAAmB;IACrCI,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACC,MAAM,CAAC,WAAW,EAAE,IAAI,CAACJ,UAAU,CAAC;EAC9D;EAEA;EACAK,cAAc;IACZ,IAAI,CAACL,UAAU,GAAG,CAAC,IAAI,CAACA,UAAU;IAClCC,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACC,MAAM,CAAC,WAAW,EAAE,IAAI,CAACJ,UAAU,CAAC;IAC5DF,YAAY,CAACQ,OAAO,CAAC,UAAU,EAAE,IAAI,CAACN,UAAU,CAACO,QAAQ,EAAE,CAAC;EAC9D;EAEA;EACAC,YAAY;IACV,IAAI,CAACb,iBAAiB,CAACa,YAAY,EAAE,CAACC,SAAS,CAACC,QAAQ,IAAG;MACzD,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACF,QAAQ,CAAC,EAAE;QAAEG,IAAI,EAAE;MAAyE,CAAE,CAAC;MACtH,MAAMC,IAAI,GAAGb,QAAQ,CAACc,aAAa,CAAC,GAAG,CAAC;MACxCD,IAAI,CAACE,IAAI,GAAGC,GAAG,CAACC,eAAe,CAACP,IAAI,CAAC;MACrCG,IAAI,CAACK,QAAQ,GAAG,0BAA0B,CAAC,CAAC;MAC5CL,IAAI,CAACM,KAAK,EAAE,CAAC,CAAC;IAChB,CAAC,EAAEC,KAAK,IAAG;MACTC,OAAO,CAACD,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;IACnE,CAAC,CAAC;EACJ;CACD;AAhCY5B,YAAY,eALxBD,SAAS,CAAC;EACT+B,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,sBAAsB;EACnCC,SAAS,EAAE,CAAC,sBAAsB;CACnC,CAAC,GACWhC,YAAY,CAgCxB;SAhCYA,YAAY","names":["Component","AppComponent","constructor","wordExportService","ngOnInit","darkModeFromStorage","localStorage","getItem","isDarkMode","document","body","classList","toggle","toggleDarkMode","setItem","toString","generateWord","subscribe","response","blob","Blob","type","link","createElement","href","URL","createObjectURL","download","click","error","console","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\DELL\\dotnet-sqlserver-angular15-crud\\angular-crud-application\\src\\app\\app.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { WordExportService } from './word-export.service';  // Importer le service\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent implements OnInit {\r\n  title = '.Net + SQL Server + Angular 15 CRUD Application';\r\n  isDarkMode = false;\r\n\r\n  // Injecter le service WordExportService\r\n  constructor(private wordExportService: WordExportService) {}\r\n\r\n  ngOnInit() {\r\n    const darkModeFromStorage = localStorage.getItem('darkMode') === 'true';\r\n    this.isDarkMode = darkModeFromStorage;\r\n    document.body.classList.toggle('dark-mode', this.isDarkMode);\r\n  }\r\n\r\n  // Méthode pour activer/désactiver le mode sombre\r\n  toggleDarkMode() {\r\n    this.isDarkMode = !this.isDarkMode;\r\n    document.body.classList.toggle('dark-mode', this.isDarkMode);\r\n    localStorage.setItem('darkMode', this.isDarkMode.toString());\r\n  }\r\n\r\n  // Méthode pour télécharger le fichier Word\r\n  generateWord(): void {\r\n    this.wordExportService.generateWord().subscribe(response => {\r\n      const blob = new Blob([response], { type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' });\r\n      const link = document.createElement('a');\r\n      link.href = URL.createObjectURL(blob);\r\n      link.download = 'GeneratedUserReport.docx'; // Nom du fichier à télécharger\r\n      link.click(); // Déclencher le téléchargement\r\n    }, error => {\r\n      console.error('Erreur lors du téléchargement du fichier:', error);\r\n    });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}